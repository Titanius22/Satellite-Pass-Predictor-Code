import org.apache.commons.math3.geometry.euclidean.threed.Vector3D;
import org.apache.commons.math3.util.FastMath;
import org.orekit.bodies.BodyShape;
import org.orekit.bodies.CelestialBody;
import org.orekit.bodies.CelestialBodyFactory;
import org.orekit.bodies.GeodeticPoint;
import org.orekit.bodies.OneAxisEllipsoid;
import org.orekit.errors.OrekitException;
import org.orekit.frames.Frame;
import org.orekit.frames.FramesFactory;
import org.orekit.frames.TopocentricFrame;
import org.orekit.orbits.KeplerianOrbit;
import org.orekit.orbits.Orbit;
import org.orekit.propagation.Propagator;
import org.orekit.propagation.SpacecraftState;
import org.orekit.propagation.analytical.KeplerianPropagator;
import org.orekit.propagation.analytical.tle.TLE;
import org.orekit.propagation.analytical.tle.TLEPropagator;
import org.orekit.propagation.events.ElevationDetector;
import org.orekit.propagation.events.EventDetector;
import org.orekit.propagation.events.handlers.EventHandler;
import org.orekit.time.AbsoluteDate;
import org.orekit.time.TimeScalesFactory;
import org.orekit.utils.Constants;
import org.orekit.utils.IERSConventions;
import org.orekit.utils.PVCoordinates;

import Quick_Copy_Files.AutoconfigurationCustom;


public class tester {
	
	public void main(String[] args) {
		
		try {
			String line1 = "1 25544U 98067A   15348.82280235  .00015563  00000-0  23610-3 0  9996";
            String line2 = "2 25544  51.6445 262.5935 0007865 276.8969 187.2494 15.54770155976144";
        	
        	// configure Orekit
            AutoconfigurationCustom.configureOrekit();
			
            //  Initial state definition : date, orbit
            AbsoluteDate targetDate = new AbsoluteDate(2015, 12, 15, 2, 54, 27.000, TimeScalesFactory.getUTC());
            
            //  Initial TLE orbit data
            TLE TLEdata = new TLE(line1, line2);
            
            // Propagator : consider a simple keplerian motion (could be more elaborate)
            Propagator TLEProp = TLEPropagator.selectExtrapolator(TLEdata);
            
            Vector3D posVec = TLEProp.propagate(targetDate).getPVCoordinates(FramesFactory.getITRF(IERSConventions.IERS_2010, true)).getPosition();
            
            posLatLong = Convert_To_Lat_Long(posVec);
            
            System.out.format("Latitude %.8f N%n" ,posLatLong[0]);
            System.out.format("Longitude %.8f E%n" ,posLatLong[1]);
            System.out.format("Altitude %.0f m %n" ,posLatLong[2]);
		
		} catch (OrekitException oe) {
            System.err.println(oe.getMessage());
        }
		

	    double[] Convert_To_Lat_Long(Vector3D posVec){
	    	double Xcomp = posVec[0];
	    	double Ycomp = posVec[1];
	    	double Zcomp = posVec[2];
	    	
	    	
	    	double longitude;
	    	double latitude;
	    	double altitude;
	    	
	    	//Done so all cases of longitudes are right
	    	if(Ycomp > 0){
	    		if(Xcomp > 0){
	    			longitude = Math.toDegrees(Math.atan(Ycomp/Xcomp));
	    		}
	    		else{
	    			longitude = 180 - Math.toDegrees(Math.atan(Math.abs(Ycomp/Xcomp)));
	    		}
	    	}
	    	else{
	    		if(Xcomp > 0){
	    			longitude = -1 * Math.toDegrees(Math.atan(Math.abs(Ycomp/Xcomp)));
	    		}
	    		else{
	    			longitude = -1 * (180 - Math.toDegrees(Math.atan(Ycomp/Xcomp)));
	    		}
	    	}
	    	
	    	//Calculate latitude
	    	latitude = Math.toDegrees(Math.atan(Zcomp/Math.sqrt(Xcomp*Xcomp + Ycomp*Ycomp)));
	    	
	    	//Calculate radius and altitude
	    	double EPR = 6356800; //Earth Polar Radius in meters
	    	double EER = 6378100; //Earth Equator Radius in meters
	    	
	    	double earthRadius = Math.sqrt((Math.pow(EPR*EPR*Math.cos(latitude),2) + Math.pow(EER*EER*Math.cos(latitude),2))/(Math.pow(EPR*Math.cos(latitude),2) + Math.pow(EER*Math.cos(latitude),2)));
	    	double orbitRadius = Math.sqrt(Xcomp*Xcomp + Ycomp*Ycomp + Zcomp*Zcomp);
	    	altitude = orbitRadius - earthRadius;
	    	return new double[]{latitude, longitude, altitude};
	    }
	}
	
}